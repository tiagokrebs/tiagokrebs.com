globalThis.Azion=globalThis.Azion||{},globalThis.Azion.networkList={};const n=new NETWORK_LIST_CONTEXT(!1);globalThis.Azion.networkList.contains=(t,e)=>n.contains(t,e),globalThis.Azion=globalThis.Azion||{},globalThis.Azion.env={},globalThis.Azion.env.get=n=>ENV_VARS_CONTEXT.get(n);const t=function(n,t,e){const i=function(n,t,e){const i=function(n){let t="";return n&&(t+=`<b>Error:</b>\n${n instanceof Error?n.stack:n}`),t}(e);return`<!DOCTYPE html>\n      <html lang="en">\n      <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>Error ${n} - ${t}</title>\n        <style>\n          body {\n            background-color: black;\n            color: rgb(255, 108, 55);\n            font-family: Arial, sans-serif;\n            text-align: center;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n          }\n          h1 {\n            font-size: 36px;\n            margin-bottom: 10px;\n            animation: levitate 2s ease-in-out infinite alternate;\n          }\n          p {\n            font-size: 18px;\n            margin-bottom: 5px;\n          }\n          a {\n            color: rgb(255, 108, 55);\n            text-decoration: none;\n          }\n      \n          @keyframes levitate {\n            0% {\n              transform: translateY(0);\n            }\n            50% {\n              transform: translateY(-10px);\n            }\n            100% {\n              transform: translateY(0);\n            }\n          }\n        </style>\n      </head>\n      <body>\n        <h1>Error ${n}</h1>\n        <p>${t||""}</p>\n        <pre>${i}</pre>\n      </body>\n      </html>`}(n,t,e);return new Response(i,{status:n,headers:{"Content-Type":"text/html"}})};addEventListener("fetch",(n=>{n.respondWith(async function(){try{return await function(n){const t=new URL(n).pathname,e=t.endsWith("/")?t.slice(0,-1):t;let i;return i="/"===e?new URL("index.html","file://"):/\.[^.]+$/.test(e)?new URL(`${e}`,"file://"):new URL(`${e}/index.html`,"file://"),fetch(i)}(n.request.url)}catch(n){return t("404")}}())}));